<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moa.mybatis.StoreBoardMapper">

    <sql id="Entrust_columns">
    ARTICLE_NUM, DETAIL_PRICE, STAR_POINT_AVG, STORAGE_TYPE, PICTURE_NAME, TOT_REVIEW_CNT,
    STORAGE_PERIOD_TYPE_ID, NICKNAME, LATITUDE, LONGITUDE
    </sql>

    <sql id="my_storage">
        HOST_ID hostId, ARTICLE_NUM articleNum, TITLE title, STORE_PRODUCT_CNT storeProductCNt,
        EXPIRE_PRODUCT_CNT exprieProductCnt, FAVORITE_CNT favoriteCnt,
        REVIEW_CNT reviewCnt, STAR_POINT starPoint, PICTURE_NAME pictureName
    </sql>

    <sql id="storage_address_columns">
        STORAGE_ID, BASE_ADDRESS, DETAIL_ADDRESS
    </sql>

    <resultMap id="entrustSearchVO" type="com.moa.model.vo.EntrustSearchVO">
        <id property="articleNum" column="ARTICLE_NUM" jdbcType="NUMERIC"/>
        <id property="detailPrice" column="DETAIL_PRICE" jdbcType="NUMERIC"/>
        <id property="starPointAvg" column="STAR_POINT_AVG" jdbcType="NUMERIC"/>
        <id property="storageType" column="STORAGE_TYPE" jdbcType="VARCHAR"/>
        <id property="pictureName" column="PICTURE_NAME" jdbcType="VARCHAR"/>
        <id property="totReviewCnt" column="TOT_REVIEW_CNT" jdbcType="NUMERIC"/>
        <id property="storagePeriodTypeId" column="STORAGE_PERIOD_TYPE_ID" jdbcType="NUMERIC"/>
        <id property="nickName" column="NICKNAME" jdbcType="VARCHAR"/>
        <id property="latitude" column="LATITUDE" jdbcType="NUMERIC"/>
        <id property="longitude" column="LONGITUDE" jdbcType="NUMERIC"/>
    </resultMap>

    <resultMap id="storage_address_map" type="com.moa.model.vo.SimpleStorageAddressVO">
        <id property="storageId" column="STORAGE_ID"/>
        <id property="baseAddress" column="BASE_ADDRESS"/>
        <id property="detailAddress" column="DETAIL_ADDRESS"/>
    </resultMap>

    <select id="selectStorages" parameterType="Integer" resultMap="storage_address_map">
        SELECT
        <include refid="storage_address_columns"/>
        -- SELECT S.STORAGE_ID, BASE_ADDRESS || ' ' || DETAIL_ADDRESS AS ADDRESS
        -- SELECT S.STORAGE_ID, BASE_ADDRESS, DETAIL_ADDRESS
        FROM STORAGE_TB JOIN ADDRESS_TB USING(ADDRESS_ID)
        where HOST_ID = #{hostId}
    </select>

    <select id="selectTransaction" resultType="String">
        SELECT TRANSACTION_WAY FROM SR_TRANSACTION_TYPE_TB
    </select>

    <select id="selectCategory" resultType="String">
        SELECT CATEGORY_NAME FROM CATEGORY_TB
    </select>

    <select id="selectStoragePeriod" resultType="String">
        SELECT PERIOD_TYPE FROM STORAGE_PERIOD_TYPE_TB
    </select>

    <select id="selectPrice" resultType="String">
        SELECT DETAIL_PRICE_NAME FROM DETAILS_PRICE_TB ORDER BY DETAILS_PRICE_ID ASC
    </select>

    <select id="selectParameters" parameterType="hashMap" resultType="hashMap">
        SELECT AUTO_STORE_BOARD_TB.NEXTVAL, ST.SR_TRANSACTION_TYPE_ID, SF.SECURITY_FACILITY_ID, SP.STORAGE_PERIOD_TYPE_ID
        FROM DUAL, SR_TRANSACTION_TYPE_TB ST, SECURITY_FACILITY_TB SF, STORAGE_PERIOD_TYPE_TB SP
        WHERE ST.TRANSACTION_WAY=#{transaction} AND SF.SECURITY=#{cctv} AND SP.PERIOD_TYPE=#{storagePeriod}
    </select>

    <select id="selectCategoryId" parameterType="String" resultType="Integer">
        SELECT CATEGORY_ID FROM CATEGORY_TB WHERE CATEGORY_NAME = #{category}
    </select>




    <insert id="insertStoreBoard" >
        <selectKey keyProperty="articleNum" resultType="long" order="BEFORE">
            SELECT AUTO_STORE_BOARD_TB.NEXTVAL FROM DUAL
        </selectKey>
        INSERT ALL
        INTO STORE_BOARD_TB (ARTICLE_NUM,HOST_ID,TITLE,CONTENT,SR_TRANSACTION_TYPE_ID,
        STORAGE_PERIOD_TYPE_ID,STORAGE_ID)
        VALUES(#{articleNum},#{hostId},#{title},#{content},
        (SELECT SR_TRANSACTION_TYPE_ID FROM SR_TRANSACTION_TYPE_TB WHERE TRANSACTION_WAY = #{transactionType}),
        (SELECT STORAGE_PERIOD_TYPE_ID FROM STORAGE_PERIOD_TYPE_TB WHERE PERIOD_TYPE = #{storagePeriodType}),#{storageId})
        <foreach collection="forbiddenProductList" item="fp" >
        INTO FORBIDDEN_PRODUCT_TB (FORBIDDEN_PRODUCT_ID,ARTICLE_NUM, PRODUCT_NAME, CATEGORY_ID)
        VALUES(GET_FP_SQ(),#{articleNum},#{fp.product},
        (SELECT CATEGORY_ID FROM CATEGORY_TB WHERE CATEGORY_NAME=#{fp.category}))
        </foreach>
        <foreach collection="detailPrice" item="price" index="index">
        INTO DETAIL_PRICE_FIBO_TB (ARTICLE_NUM, DETAILS_PRICE_ID, DETAIL_PRICE)
        VALUES(#{articleNum},#{index}+1,#{price})
        </foreach>
        <foreach collection="securityList" item = "security" >
        INTO SF_SB_TB (SECURITY_FACILITY_ID, ARTICLE_NUM)
        VALUES((SELECT SECURITY_FACILITY_ID FROM security_facility_tb WHERE SECURITY = #{security}),#{articleNum})
        </foreach>
        <foreach collection="attachList" item="attach">
        INTO SB_ATTACHED_PICTURE_TB (ARTICLE_NUM, UPLOADPATH, UUID, PICTURE_NAME, FILETYPE, SB_ATTACHED_PICTURE_ID)
        VALUES(#{articleNum}, #{attach.uploadPath}, #{attach.uuid}, #{attach.fileName}, #{attach.fileType}, GET_SBAP_SQ())
        </foreach>
        SELECT *
        FROM DUAL
    </insert>

    <insert id="insertPet">
        INSERT INTO PET_TYPE_TB (ARTICLE_NUM, PET) VALUES(#{articleNum}, #{pet})
    </insert>

    <select id="searchEntrust" parameterType="com.moa.model.vo.EntrustSearchVO" resultMap="entrustSearchVO">
        SELECT * FROM SEARCH_BOARD_VIEW SBV
       JOIN
        (
        SELECT ARTICLE_NUM FROM ARTICLE_SEARCH_VIEW
        WHERE SR_TRANSACTION_TYPE_ID LIKE #{transactionType}
        AND calc_distance(LATITUDE,LONGITUDE,#{latitude},#{longitude}) <![CDATA[<=]]> #{distance}
        AND STORAGE_PERIOD_TYPE_ID LIKE #{storagePeriodType}
        AND PET_FLAG LIKE #{petFlag}
        AND SECURITY_FACILITY_ID LIKE #{securityFacility}
        AND STORAGE_TYPE LIKE #{storageType}
        AND CATEGORY_ID NOT IN
        <foreach collection="category" item="type" open="(" close=")" separator=","> #{type}</foreach>
        )SB
        USING (ARTICLE_NUM)
        <choose>
            <when test="filter == '거리 가까운 순'">
                ORDER BY calc_distance(LATITUDE,LONGITUDE,#{latitude},#{longitude})
            </when>
            <when test="filter == '리뷰 많은 순'">
                ORDER BY SBV.TOT_REVIEW_CNT DESC
            </when>
            <when test="filter == '가격 낮은 순'">
                ORDER BY SBV.DETAIL_PRICE
            </when>
            <when test="filter == '가격 높은 순'">
                ORDER BY SBV.DETAIL_PRICE DESC
            </when>
            <when test="filter == '별점 높은 순'">
                ORDER BY SBV.STAR_POINT_AVG DESC
            </when>
        </choose>

    </select>

    <select id="selectOne" parameterType="int" resultType="hashMap">
        SELECT * FROM STORE_BOARD_VIEW WHERE 글번호 = #{articleNum}
    </select>

    <select id="selectDetailPrice" resultType="java.lang.String">
        SELECT DETAIL_PRICE_NAME AS 상세가격 FROM DETAILS_PRICE_TB ORDER BY DETAILS_PRICE_ID
    </select>

    <select id="searchMyStorage" parameterType="hashMap" resultType="com.moa.model.vo.SimpleStorageBoardVO">

        select * from
        (
        select * from
        (select ROW_NUMBER() OVER(ORDER BY ARTICLE_NUM ASC) AS RW,
        <include refid="my_storage"/>
        FROM MY_STORAGE_VIEW WHERE HOST_ID = #{hostId}) MY_STORAGE_VIEW
        WHERE RW <![CDATA[<=]]> #{lastNum}
        ) where rw >= #{firstNum}
    </select>

    <select id="searchMyStorageCnt" parameterType="int" resultType="int">
        select count(*) from MY_STORAGE_VIEW where host_id = #{hostId}
    </select>

    <update id="deleteOne" parameterType="int">
        UPDATE STORE_BOARD_TB SET DEL_FLAG='Y' where ARTICLE_NUM=#{articleNum}
    </update>
</mapper>

